1. IOC Container

    1.1 Spring IoC Container and Beans

        *. org.springframework.beans
        *. org.springframework.context
        *. BeanFactory
        *. ApplicationContext is the sub-Interface of BeanFactory


    1.2 Container

        1.2.1 Configuration Metadata 

            *. org.springframework.context.ApplicationContext
            *. is responsible for instantiating, configuring, and assembling the beans.

            *. ClassPathXmlApplicationContext
            *. FileSystemXmlApplicationContext

            *. Make IoC Container.
            *. Input Configuration Metadata (=Configuration)
            *. and My Business Objects. (=Service)
            *. Produces Fully Configured System Ready for Use.

            *. Annotation-based Configuration (Spring 2.5)
            *. Java-based Configuration (Spring 3.0)

            *. @Configuration
            *. @Bean
            *. @Import
            *. @DependsOn


        1.2.2 Instantiating

            *. ApplicationContext context;
            *. context = new ClassPathXmlApplicationContext("services.xml", "daos.xml");

            *. IoC Container 안에 DAO 빈 등록
            *. IoC Container 안에 Service 빈 등록하며 Service 안에 DAO 추가


        1.2.3 Using the Container

            *. Create IoC Container
            ApplicationContext context;

            *. Configure Beans
            context = new ClassPathXmlApplicationContext("services.xml", "daos.xml");

            *. Retrieve Configured Instance
            PetStoreService service = context.getBean("petStore", PetStoreService.class);

            *. Use Configured Instance
            List<String> userList = service.getUserNameList();


    1.3 Bean

        1.3.1 Naming Beans

            *. 


        1.3.2 Instantiating Beans




    1.4 Dependencies

    1.5 Bean Scopes

    1.6 Customizing the Nature of a Bean

    1.7 Bean Definition Inheritance

    1.8 Container Extension Points

    1.9 Annotated-based Container Configuration

    1.10 Classpath Scanning and Managed Components

    1.11 JSR-330 Standard Annotations

    1.12 Java-based Container Configuration

    1.13 Environment Abstraction

    1.14 Registering a LoadTimeWeaver

    1.15 ApplicationContext

    1.16 BeanFactory API

2. Resources

    2.1 Introduction

    2.2 The Resource Interface

    2.3 Built-in Resource Implementations

    2.4 The ResourceLoader Interface

    2.5 The ResourcePatternResolver Interface

    2.6 The ResourceLoaderAware Interface

    2.7 Resources as Dependencies

    2.8 Application Contexts and Resource Paths

3. Validation, Data Binding, Type Conversion

    3.1 Validation by using Spring's Validator Interface

    3.2 Resolving Codes to Error Messages

    3.3 Bean Manipulation and BeanWrapper

    3.4 Spring Type Conversion

    3.5 Spring Field Formatting

    3.6 Configuring a Global Date and Time Format

    3.7 Java Bean Validation

4. Spring Expression Language (SpEL)

    4.1 Evaluation

    4.2 Expressions in Bean Definitions

    4.3 Language References

    4.4 Classed Used in the Examples

5. Aspect Oriented Programming with Spring

    5.1 AOP Concepts

    5.2 Spring AOP Capabilities and Goals

    5.3 AOP Proxies

    5.4 @AspectJ support

    5.5 Schema-based AOP Support

    5.6 Choosing which AOP Declaration Style to Use

    5.7 Mixing Aspect Types

    5.8 Proxing Mechanism

    5.9 Programmatic Creation of @AspectJ Proxies

    5.10 Using AspectJ with Spring Applications

    5.11 Further Resources

6. Spring AOP APIs

    6.1 Pointcut API in Spring

        6.1.1 Concepts

        6.1.2 Operations on Pointcuts

        6.1.3 AspectJ Expression Pointcuts

        6.1.4 Convenience Pointcut Implementations

        6.1.5 Pointcut Superclasses

        6.1.6 Custom Pointcuts

    6.2 Advice API in Spring

    6.3 The Advisor API in Spring

    6.4 Using the ProxyFactoryBean to Create AOP Proxies

    6.5 Concise Proxy Definitions

    6.6 Creating AOP Proxies Programmatically with the ProxyFactory

    6.7 Manipulating Advised Objects

    6.8 Using the "auto-proxy" facility

    6.9 Using TargetSource Implementations

    6.10 Defining New Advice Types

7. Null-Safety

8. Data Buffers and Codecs

9. Logging

10. Appendix