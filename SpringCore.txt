1. IOC Container

    1.1 Spring IoC Container and Beans

        *. org.springframework.beans
        *. org.springframework.context
        *. BeanFactory
        *. ApplicationContext is the sub-Interface of BeanFactory


    1.2 Container

        1.2.1 Configuration Metadata 

            *. org.springframework.context.ApplicationContext
            *. is responsible for instantiating, configuring, and assembling the beans.

            *. ClassPathXmlApplicationContext
            *. FileSystemXmlApplicationContext

            *. Make IoC Container.
            *. Input Configuration Metadata (=Configuration)
            *. and My Business Objects. (=Service)
            *. Produces Fully Configured System Ready for Use.

            *. Annotation-based Configuration (Spring 2.5)
            *. Java-based Configuration (Spring 3.0)

            *. @Configuration
            *. @Bean
            *. @Import
            *. @DependsOn


        1.2.2 Instantiating

            *. ApplicationContext context;
            *. context = new ClassPathXmlApplicationContext("services.xml", "daos.xml");

            *. IoC Container 안에 DAO 빈 등록
            *. IoC Container 안에 Service 빈 등록하며 Service 안에 DAO 추가


        1.2.3 Using the Container

            *. Create IoC Container
            ApplicationContext context;

            *. Configure Beans
            context = new ClassPathXmlApplicationContext("services.xml", "daos.xml");

            *. Retrieve Configured Instance
            PetStoreService service = context.getBean("petStore", PetStoreService.class);
            *. Use Configured Instance
            List<String> userList = service.getUserNameList();


    1.3 Bean

        1.3.1 Naming Beans

            *. id = 식별자
            *. name = alias
            *. Bean Naming onvention = camelCase
            *. id=myBean, name=mb

            *. <alias name="fromName" alias="toName"/>


        1.3.2 Instantiating Beans

            *. with a Constructor
                default Constructor + Getter / Setter 

            *. with XML-based configuration metadata
                <bean id="exampleBean" class="examples.ExampleBean"/>
                <bean name="anotherExample" class="examples.ExampleBeanTwo"/>

            *. with a Static Factory Method
                1. 생성자에 private 접근 제어자를 선언하여 외부에서 호출할 수 없도록 설정.
                2. private static 필드를 선언.
                3. static 메서드를 선언.
                4. 해당 메서드에 if문을 활용하여 필드가 null 값을 가진다면 클래스를 할당.
                4. 메서드가 생성자를 대체.

                public class ClientService {
                    private static ClientService clientService = new ClientService;
                    private ClientService() {}

                    public static ClientService createInstance() {
                        return clientService;
                    }
                }

            *. by Using an Instance Factory Method

                public class DefaultServiceLocator {
                    private static ClientService clientService = new ClientService();
                    private static ServerService serverService = new ServerService();

                    public ClientService createClientService() {
                        return clientService;
                    }

                    public ServerService createClientService() {
                        return serverService;
                    }
                }

            *. In Spring Docs

                1. IoC Container 방식으로 생성한 Bean 객체는
                2. Factory Method (static or instance) 방식으로 생성된 객체를 의미.

            *. Determining a Bean's Runtime Type

                1. is non-trivial to determine (=결정할 수 없다.)
                2. 런타임 타입에 대해서 알고 싶다면 BeanFactory.getType 메서드를 호출하라.


    1.4 Dependencies

        1.4.1 Dependency Injection (DI)

            *. is a process whereby objects define their dependencies.
            *. only through
                1. constructor arguments
                2. arguments to a factory method (static factory method)
                3. properties that are set on the object instance after it is constructed or returned from a factory method (instance factory method)

            *. The container then injects those dependencies when it creates the bean.

            *. Constructor arguments name
                public class ExampleBean {

                    // Fields omitted

                    @ConstructorProperties({"years", "ultimateAnswer"})
                    public ExampleBean(int years, String ultimateAnswer) {
                        this.years = years;
                        this.ultimateAnswer = ultimateAnswer;
                    }
                }

            *. Dependency Resolution Process

                1. ApplicationContext is created and intialized with configuration metadata.
                2. dependencies are expressed in
                    1. properties (Getter & Setter)
                    2. constructor arguments
                    3. arguments to the static-factory method
                3. Each properties or constructor argument is an actual definition of
                    the value to set, or a reference to another bean in the container.
                    (=set value)
                4. Each properties or constructor argument is a value
                    is converted from its specified foramt to the actual type of that
                    property or constructor argument.
                    (=type conversion)
                5. By default, Spring can convert a value supplied in string format to all
                    built-in types, such as int, long, String, boolean, and so forth.
                6. Spring Container 방식에서는 bean 객체가 생성될 때 validate 한다.
                    그러나 그 이후에 실제로 값이 할당된다.
                7. 싱글톤 패턴의 Bean 객체는 생성시 값이 할당된다.
                8. Bean 객체 생성은 암묵적으로 Beans 사이에서 graph 알고리즘을 유발한다.
                9. 하나의 의존성이 다른 곳의 의존성과 연결된다.

            *. Dependencies and Configuration in Detail


    1.5 Bean Scopes

        *. 

    1.6 Customizing the Nature of a Bean

    1.7 Bean Definition Inheritance

    1.8 Container Extension Points

    1.9 Annotated-based Container Configuration

    1.10 Classpath Scanning and Managed Components

    1.11 JSR-330 Standard Annotations

    1.12 Java-based Container Configuration

    1.13 Environment Abstraction

    1.14 Registering a LoadTimeWeaver

    1.15 ApplicationContext

    1.16 BeanFactory API

2. Resources

    2.1 Introduction

    2.2 The Resource Interface

    2.3 Built-in Resource Implementations

    2.4 The ResourceLoader Interface

    2.5 The ResourcePatternResolver Interface

    2.6 The ResourceLoaderAware Interface

    2.7 Resources as Dependencies

    2.8 Application Contexts and Resource Paths

3. Validation, Data Binding, Type Conversion

    3.1 Validation by using Spring's Validator Interface

    3.2 Resolving Codes to Error Messages

    3.3 Bean Manipulation and BeanWrapper

    3.4 Spring Type Conversion

    3.5 Spring Field Formatting

    3.6 Configuring a Global Date and Time Format

    3.7 Java Bean Validation

4. Spring Expression Language (SpEL)

    4.1 Evaluation

    4.2 Expressions in Bean Definitions

    4.3 Language References

    4.4 Classed Used in the Examples

5. Aspect Oriented Programming with Spring

    5.1 AOP Concepts

    5.2 Spring AOP Capabilities and Goals

    5.3 AOP Proxies

    5.4 @AspectJ support

    5.5 Schema-based AOP Support

    5.6 Choosing which AOP Declaration Style to Use

    5.7 Mixing Aspect Types

    5.8 Proxing Mechanism

    5.9 Programmatic Creation of @AspectJ Proxies

    5.10 Using AspectJ with Spring Applications

    5.11 Further Resources

6. Spring AOP APIs

    6.1 Pointcut API in Spring

        6.1.1 Concepts

        6.1.2 Operations on Pointcuts

        6.1.3 AspectJ Expression Pointcuts

        6.1.4 Convenience Pointcut Implementations

        6.1.5 Pointcut Superclasses

        6.1.6 Custom Pointcuts

    6.2 Advice API in Spring

    6.3 The Advisor API in Spring

    6.4 Using the ProxyFactoryBean to Create AOP Proxies

    6.5 Concise Proxy Definitions

    6.6 Creating AOP Proxies Programmatically with the ProxyFactory

    6.7 Manipulating Advised Objects

    6.8 Using the "auto-proxy" facility

    6.9 Using TargetSource Implementations

    6.10 Defining New Advice Types

7. Null-Safety

8. Data Buffers and Codecs

9. Logging

10. Appendix